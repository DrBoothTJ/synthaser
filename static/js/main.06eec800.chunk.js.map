{"version":3,"sources":["components/domains/CDD.jsx","components/domains/Item.jsx","components/domains/List.jsx","components/rules/filter/Item.jsx","components/rules/filter/List.jsx","components/rules/rename/Item.jsx","components/rules/rename/List.jsx","components/rules/Item.jsx","components/rules/List.jsx","components/Tree.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["CDD","Object","values","dataJSON","promiseOptions","inputValue","length","Promise","resolve","setTimeout","filter","d","accession","toLowerCase","includes","name","map","r","label","value","filterDomains","DomainItem","props","domains","type","onClick","handleRemove","className","htmlFor","id","placeholder","data","onChange","handleChange","required","isMulti","defaultValue","loadOptions","target","DomainList","handleAdd","domain","index","uuid","FilterItem","allDomains","typeOptions","useMemo","find","domainOptions","nameValue","domainsValue","o","handleChangeName","useCallback","event","handleChangeDomains","options","React","memo","FilterList","filters","filterItems","RenameItem","from","after","to","afterValue","a","e","RenameList","renames","rename","RuleItem","evaluator","handleUpdate","selectedDomains","uuidv4","events","forEach","RuleList","rules","items","rule","handleRemoveRule","handleChangeRule","RuleTree","treeData","isVirtualized","Form","callback","useState","hierarchy","state","setState","handleObjectChange","obj","key","findRuleInHierarchy","getNodeKey","node","searchMethod","handleChangeDomain","newData","idx","changed","blob","filename","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","text","Blob","makeBlob","JSON","stringify","file","files","reader","FileReader","readAsText","onload","parse","result","onerror","console","log","error","_","dIndex","children","title","matches","match","removeNode","path","changeNodeAtPath","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.06eec800.chunk.js","sourcesContent":["import dataJSON from './cdd.json'\n\nexport const CDD = Object.values(dataJSON)\n\nexport const filterDomains = inputValue => {\n  return CDD.filter(\n    d => d.accession.toLowerCase().includes(inputValue.toLowerCase())\n    || d.name.toLowerCase().includes(inputValue.toLowerCase())\n  ).map(r => {\n    r.label = `${r.name} [${r.accession}]`\n    r.value = r.name\n    return r\n  })\n}\n\nexport const promiseOptions = inputValue => {\n  if (inputValue.length < 3) return\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(filterDomains(inputValue))\n    }, 1000)\n  })\n}\n","import { promiseOptions } from './CDD'\nimport AsyncSelect from 'react-select/async'\n\nexport const DomainItem = props => {\n\n  // Mock up event since Select components do not\n  // use event.target.value\n  const onChange = domains => props.handleChange({\n    target: {\n      name: \"domains\",\n      value: domains || []\n    }\n  })\n\n  const defaultValues = domains => {\n    if (!(domains && domains.length > 0))\n      return null\n    return domains.map(d => ({\n      label: `${d.name} [${d.accession}]`,\n      value: d.accession\n    }))\n  }\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={props.handleRemove}\n      >\n        Delete\n      </button>\n      <div className=\"rule-field\">\n        <label htmlFor=\"domain-type\">Type:</label>\n        <input\n          id=\"domain-type\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Domain type...\"\n          value={props.data.name}\n          onChange={props.handleChange}\n          required\n        />\n      </div>\n      <div className=\"rule-field\">\n        <label htmlFor=\"domain-families\">Families:</label>\n        <AsyncSelect\n          id=\"domain-families\"\n          className=\"select\"\n          isMulti\n          defaultValue={defaultValues(props.data.domains)}\n          loadOptions={promiseOptions}\n          onChange={onChange}\n        />\n      </div>\n    </li>\n  )\n}\n","import { DomainItem } from './Item'\n\nexport const DomainList = props => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={props.handleAdd}>Add</button>\n    </div>\n    <ul>\n      {props.domains.map((domain, index) => {\n        return (\n          <DomainItem\n            key={domain.uuid}\n            data={domain}\n            handleRemove={props.handleRemove(index)}\n            handleChange={props.handleChange(index)}\n          />\n        )\n      })}\n    </ul>\n  </div>\n)\n","import React, { useMemo, useCallback } from 'react'\nimport Select from 'react-select'\n\n/**\n * A domain family filter item in a FilterList component.\n *\n * Props:\n *  @prop data {Object} - object containing data for a rule filter\n *  @prop rule {Object} - the parent rule object\n *  @prop domains {Array} - array of all domains\n *  @prop handleChange {Function} - fn for updating filter in rule\n *  @prop handleRemove {Function} - fn for removing filter from rule\n */\nconst FilterItem = ({\n  type,\n  domains,\n  allDomains,\n  typeOptions,\n  handleRemove,\n  handleChange,\n}) => {\n  // Get the domain object corresponding to the selected type, if exists\n  const domain = useMemo(\n    () => type ? allDomains.find(d => d.name === type) : null,\n    [type, allDomains]\n  )\n\n  // Generate domain family options based on families in the selected type\n  const domainOptions = useMemo(\n    () => domain\n      ? domain.domains.map(d => ({ label: d.name, value: d.accession }))\n      : [],\n    [domain]\n  )\n\n  const nameValue = useMemo(\n    () => domain ? {label: domain.name, value: domain.name} : null,\n    [domain]\n  )\n\n  const domainsValue = useMemo(\n    () => domains.map(d => domainOptions.find(o => o.value === d)),\n    [domains, domainOptions]\n  )\n\n  const handleChangeName = useCallback(event => {\n    handleChange([\n      { target: { name: \"domains\", value: [] } },\n      { target: { name: \"type\", value: event.value } },\n    ])\n  }, [handleChange])\n\n  const handleChangeDomains = useCallback(event => {\n    handleChange([\n      { target: { name: \"domains\", value: event ? event.map(d => d.value) : [] } }\n    ])\n  }, [handleChange])\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={handleRemove}\n      >\n        Delete\n      </button>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterName\">Domain name:</label>\n        <Select\n          className=\"select\"\n          options={typeOptions}\n          onChange={handleChangeName}\n          value={nameValue}\n        />\n      </div>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterDomains\">Domain types:</label>\n        <Select\n          className=\"select\"\n          options={domainOptions}\n          onChange={handleChangeDomains}\n          value={domainsValue}\n          isMulti\n        />\n      </div>\n    </li>\n  )\n}\n\nexport default React.memo(FilterItem)\n","import React, { useMemo } from 'react'\n\nimport FilterItem from './Item'\n\nconst FilterList = ({\n  filters,\n  domains,\n  allDomains, \n  handleAdd,\n  handleChange,\n  handleRemove,\n}) => {\n\n  const typeOptions = useMemo(\n    () => domains.map(d => ({ label: d, value: d })),\n    [domains]\n  )\n\n  const filterItems = filters.map(filter => (\n    <FilterItem\n      key={filter.uuid}\n      type={filter.type}\n      domains={filter.domains}\n      allDomains={allDomains}\n      typeOptions={typeOptions}\n      handleChange={handleChange(filter.uuid)}\n      handleRemove={handleRemove(filter.uuid)}\n    />\n  ))\n\n  return (\n    <div>\n      <div>\n        <button type=\"button\" onClick={handleAdd}>Add</button>\n      </div>\n      <ul>\n        {filterItems}\n      </ul>\n    </div>\n  )\n}\n\nexport default React.memo(FilterList)\n","import React, { useMemo } from 'react'\nimport Select from 'react-select'\n\n\nconst RenameItem = ({\n  from,\n  after,\n  to,\n  options,\n  handleChange,\n  handleRemove,\n}) => {\n\n  const handleChangeFrom = event => {\n    handleChange({\n      target: { name: \"from\", value: event.value }\n    })\n  }\n  const handleChangeAfter = event => {\n    handleChange({\n      target: { name: \"after\", value: event ? event.map(e => e.value) : [] }\n    })\n  }\n\n  const nameValue = useMemo(\n    () => options ? options.find(o => o.label === from) : null,\n    [from, options]\n  )\n  const afterValue = useMemo(\n    () => options ? after.map(a => options.find(o => o.label === a)) : [],\n    [after, options]\n  )\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={handleRemove}\n      >\n        Delete\n      </button>\n\n      {/* Change this domain name */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"renameName\">From:</label>\n        <Select\n          id=\"renameName\"\n          className=\"select\"\n          onChange={handleChangeFrom}\n          options={options}\n          value={nameValue}\n        />\n      </div>\n\n      {/* Change domain name when occuring after these domains */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"renameAfter\">After domains:</label>\n        <Select\n          id=\"renameAfter\"\n          className=\"select\"\n          options={options}\n          onChange={handleChangeAfter}\n          value={afterValue}\n          isMulti\n        />\n      </div>\n\n      {/* Change domain name to this value */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterTo\">To:</label>\n        <input\n          id=\"filterTo\"\n          type=\"text\"\n          name=\"to\"\n          value={to}\n          onChange={handleChange}\n        />\n      </div>\n    </li>\n  )\n}\n\nexport default React.memo(RenameItem)\n","import React from 'react'\n\nimport RenameItem from './Item'\n\nconst RenameList = ({\n  renames,\n  options,\n  handleAdd,\n  handleChange,\n  handleRemove,\n}) => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={handleAdd}>Add</button>\n    </div>\n    <ul>\n      {renames.map(rename => (\n        <RenameItem\n          key={rename.uuid}\n          from={rename.from}\n          after={rename.after}\n          to={rename.to}\n          options={options}\n          handleChange={handleChange(rename.uuid)}\n          handleRemove={handleRemove(rename.uuid)}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nexport default React.memo(RenameList)\n","import { useMemo } from 'react'\nimport React from 'react'\nimport Select from 'react-select'\n\nimport FilterList from './filter/List'\nimport RenameList from './rename/List'\n\nimport { v4 as uuidv4 } from 'uuid'\n\n\nconst RuleItem = ({\n  name,\n  domains,\n  allDomains,\n  evaluator,\n  filters,\n  renames,\n  handleRemove,\n  handleChange,\n  handleUpdate,\n  domainOptions,\n}) => {\n\n  const selectedDomains = useMemo(\n    () => domains.map(d => domainOptions.find(o => o.label === d)),\n    [domains, domainOptions]\n  )\n\n  const handleChangeDomains = event => handleUpdate(\n    \"domains\",\n    event ? event.map(e => e.value) : []\n  )\n\n  const handleAddFilter = () => {\n    handleUpdate(\n      \"filters\",\n      [{ uuid: uuidv4(), type: \"\", domains: [] }, ...filters]\n    )\n  }\n  const handleChangeFilter = uuid => events => {\n    handleUpdate(\n      \"filters\",\n      filters.map(filter => {\n        if (filter.uuid !== uuid) return filter\n        const data = { ...filter }\n        events.forEach(event => {\n          data[event.target.name] = event.target.value\n        })\n        return data\n      })\n    )\n  }\n  const handleRemoveFilter = uuid => () => {\n    handleUpdate(\n      \"filters\",\n      filters.filter(filter => filter.uuid !== uuid)\n    )\n  }\n\n  const handleAddRename = () => {\n    handleUpdate(\n      \"renames\",\n      [{ uuid: uuidv4(), \"from\": \"\", \"after\": [], \"to\": \"\" }, ...renames]\n    )\n  }\n  const handleChangeRename = uuid => event => {\n    handleUpdate(\n      \"renames\",\n      renames.map(rename => {\n        if (rename.uuid !== uuid) return rename\n        return { ...rename, [event.target.name]: event.target.value}\n      })\n    )\n  }\n  const handleRemoveRename = uuid => () => {\n    handleUpdate(\n      \"renames\",\n      renames.filter(rename => rename.uuid !== uuid)\n    )\n  }\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={handleRemove}\n      >\n        Delete\n      </button>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleName\">Name:</label>\n        <input\n          id=\"ruleName\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleDomains\">Domains:</label>\n        <Select\n          name=\"domains\"\n          options={domainOptions}\n          onChange={handleChangeDomains}\n          className=\"select\"\n          value={selectedDomains}\n          isMulti\n        />\n      </div>\n      \n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleEvaluator\">Evaluation expression:</label>\n        <input\n          id=\"ruleEvaluator\"\n          type=\"text\"\n          name=\"evaluator\"\n          value={evaluator}\n          onChange={handleChange}\n        />\n      </div>\n\n      <label htmlFor=\"ruleFilters\">Domain filters:</label>\n      <FilterList\n        id=\"ruleFilters\"\n        filters={filters}\n        domains={domains}\n        allDomains={allDomains}\n        handleAdd={handleAddFilter}\n        handleRemove={handleRemoveFilter}\n        handleChange={handleChangeFilter}\n      />\n\n      <label htmlFor=\"ruleRename\">Rename domains:</label>\n      <RenameList\n        id=\"ruleRename\"\n        renames={renames}\n        domains={domains}\n        options={selectedDomains}\n        handleAdd={handleAddRename}\n        handleRemove={handleRemoveRename}\n        handleChange={handleChangeRename}\n        domainOptions={domainOptions}\n      />\n    </li>\n  )\n}\n\nexport default React.memo(RuleItem)\n","import React, { useMemo } from 'react'\n\nimport RuleItem from './Item'\n\n\nexport const RuleList = ({\n  domains,\n  rules,\n  handleAdd,\n  handleRemove,\n  handleChange,\n}) => {\n\n  const domainOptions = useMemo(\n    () => domains.map(domain => ({\n      label: domain.name,\n      value: domain.name\n    })), [domains]\n  )\n\n  const getItems = () => rules.map(rule => {\n    // Show rules in reverse, so they can be edited at the top\n    // but still maintain added order\n    const handleRemoveRule = handleRemove(rule.uuid)\n    const handleChangeRule = handleChange(rule.uuid)\n    const handleUpdateRule = (label, value) => {\n      handleChangeRule({\n        target: { name: label, value : value }\n      })\n    }\n\n    return (\n      <RuleItem\n        key={rule.uuid}\n        name={rule.name}\n        domains={rule.domains}\n        renames={rule.renames}\n        filters={rule.filters}\n        evaluator={rule.evaluator}\n        allDomains={domains}\n        domainOptions={domainOptions}\n        handleRemove={handleRemoveRule}\n        handleChange={handleChangeRule}\n        handleUpdate={handleUpdateRule}\n      />\n    )\n  })\n\n  const items = getItems()\n\n  return (\n    <div>\n      <div>\n        <button type=\"button\" onClick={handleAdd}>Add</button>\n      </div>\n      <ul>\n        {items}\n      </ul>\n    </div>\n  )\n}\n","import SortableTree from 'react-sortable-tree'\n\n\nconst Tree = props => (\n  <ul>\n    {props.rules.map(rule => (\n      <li key={rule.uuid}>\n        {rule.name}\n        {rule.children ? <Tree rules={rule.children}/> : null}\n      </li>\n    ))}\n  </ul>\n)\n\nexport const RuleTree = props => {\n  return (\n    <SortableTree\n      treeData={props.rules}\n      isVirtualized={false}\n      onChange={props.onChange}\n    />\n  )\n}\n","import { useState } from 'react'\nimport { DomainList } from './domains/List'\nimport { RuleList } from './rules/List'\nimport { RuleTree } from './Tree'\nimport { v4 as uuidv4 } from 'uuid'\nimport { find, removeNode, changeNodeAtPath } from 'react-sortable-tree'\n\n\n/**\n * Creates new Blob object containing serialised ruleset.\n */\nfunction makeBlob(text) {\n  return new Blob([text], {type: \"text/json\"})\n}\n\n/**\n * Prompts user download of a Blob object given some filename.\n */\nfunction download(blob, filename) {\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n/**\n * The main synthaser rule generator form.\n */\nexport const Form = () => {\n  const [state, setState] = useState({\n    domains: [],\n    rules: [],\n    hierarchy: [],\n  })\n\n  /**\n   * Prepends a new domain object to the domain array in state.\n   *\n   * Each new domain has the following properties:\n   * @prop {String} uuid - Unique identifier string generated by uuidv4\n   * @prop {String} name - Name of domain type\n   * @prop {Array} domains - Domain families of this domain type\n   */\n  const handleAddDomain = () => {\n    setState({\n      ...state,\n      domains: [{ uuid: uuidv4(), name: \"\", domains: [] }, ...state.domains]\n    })\n  }\n\n  /**\n   * Creates a function which can remove a domain object from state.\n   */\n  const handleRemoveDomain = index => () => {\n    setState({\n      ...state,\n      domains: state.domains.filter((_, dIndex) => index !== dIndex)\n    })\n  }\n\n  /**\n   * Creates a copy of an object with new key/value pair from an event.\n   */\n  const handleObjectChange = (obj, event) => {\n    const key = event.target.name\n    return { ...obj, [key]: event.target.value}\n  }\n\n  const findRuleInHierarchy = uuid => {\n    return find({\n      getNodeKey: ({ node }) => node.key,\n      treeData: state.hierarchy,\n      searchMethod: ({ node }) => node.key === uuid,\n    })\n  }\n\n  /**\n   * Creates a function which can update domain/rule arrays in state.\n   * First layer takes a name ('domains', 'rules') and creates function\n   * that takes an array index. This function then creates a function\n   * which takes an event, updating the element at the index in the state.\n   */\n  const updateList = (name, callback) => index => event => {\n    const newData = state[name].map((obj, idx) => {\n      if (idx !== index) return obj\n      let changed = handleObjectChange(obj, event)\n      if (callback)\n        callback(changed)\n      return changed\n    })\n    setState({ ...state, [name]: newData })\n  }\n  const handleChangeDomain = updateList(\"domains\")\n\n  const handleChangeRule = uuid => event => {\n    let hierarchy\n    let rules = state.rules.map(rule => {\n      if (rule.uuid !== uuid) return rule\n\n      // Find rule in hierarchy\n      rule = handleObjectChange(rule, event)\n      let { matches, treeData } = findRuleInHierarchy(rule.uuid) \n\n      // Update its title\n      for (const match of matches) {\n        hierarchy = changeNodeAtPath({\n          treeData: treeData,\n          path: match.path,\n          getNodeKey: ({ node }) => node.key,\n          newNode: ({ node }) => ({ ...node, title: rule.name })\n        })\n      }\n      return rule\n    })\n\n    // Update the state\n    setState({ ...state, rules: rules, hierarchy: hierarchy })\n  }\n\n  /**\n   * Appends a new rule to the rules array in state.\n   *\n   * Each new rule has the following properties:\n   * @prop {String} uuid - Unique identifier string generated by uuidv4\n   * @prop {String} name - Name of rule\n   * @prop {Array} domains - Domain types used by this rule\n   * @prop {Array} filters - Domain type filter rules\n   * @prop {Array} renames - Domain type rename rules\n   * @prop {String} evaluator - Evaluation logical expression\n   */\n  const handleAddRule = () => {\n    let uuid = uuidv4()\n    setState({\n      ...state,\n      rules: [\n        ...state.rules,\n        {\n          uuid: uuid,\n          name: \"\",\n          domains: [],\n          filters: [],\n          renames: [],\n          children: [],\n          evaluator: \"\",\n        }\n      ],\n      hierarchy: [\n        ...state.hierarchy,\n        {\n          title: \"\",\n          key: uuid,\n          children: [],\n        }\n      ]\n    })\n  }\n\n  /**\n   * Generates removal function for a rule at a given index.\n   * This function is passed to a <RuleList> argument, which will\n   * call it for each <RuleItem> index, so rules can be deleted\n   * from within those components by button click.\n   */\n  const handleRemoveRule = uuid => () => {\n    let { matches, treeData } = findRuleInHierarchy(uuid)\n\n    // Remove the node from the hierarchy\n    for (const match of matches) {\n      treeData = removeNode({\n        getNodeKey: ({ node }) => node.key,\n        treeData: treeData,\n        path: match.path, \n      }).treeData\n    }\n\n    // Update state\n    setState({\n      ...state,\n      rules: state.rules.filter(rule => rule.uuid !== uuid),\n      hierarchy: treeData || [],\n    })\n  }\n\n  /**\n   * Serialises ruleset to JSON and prompts user download.\n   */\n  const handleSaveRule = () => {\n    let text = JSON.stringify(state, null, 2)\n    let blob = makeBlob(text)\n    download(blob, 'synthaser_rules.json')\n  }\n\n  /**\n   * Loads saved JSON ruleset from file <input> element.\n   */\n  const handleLoadRule = event => {\n    let files = event.target.files\n    let file = files[0]\n    if (!file) return\n    let reader = new FileReader()\n    reader.readAsText(file)\n    reader.onload = function() {\n      let data = JSON.parse(reader.result)\n      setState(data)\n    }\n    reader.onerror = function() {\n      console.log(reader.error)\n    }\n  }\n\n  return (\n    <form>\n      <div>\n        <div className=\"navbar\">\n          <b>synthaser rule generator</b>\n          <div className=\"nav-buttons\">\n            <button\n              type=\"button\"\n              className=\"nav-button btn-save\"\n              onClick={handleSaveRule}\n            >\n              Save rules\n            </button>\n            <input\n              type=\"file\"\n              name=\"file\"\n              id=\"rule-upload\"\n              onChange={handleLoadRule}\n            />\n            <label\n              className=\"nav-button btn-load\"\n              htmlFor=\"rule-upload\"\n            >Load rules</label>\n            <button\n              type=\"button\"\n              className=\"nav-button btn-clear\"\n              onClick={() => setState({ domains: [], rules: [] })}\n            >\n              Clear all fields\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"Container\">\n        <div className=\"Pane\">\n          <h2>Domain types</h2>\n          <p>\n            Define domain classes (e.g. KS) and select the relevant CDD domain families.\n            Search suggestions are shown when at least 3 characters are typed in the box.\n          </p>\n          <DomainList\n            domains={state.domains}\n            handleAdd={handleAddDomain}\n            handleRemove={handleRemoveDomain}\n            handleChange={handleChangeDomain}\n          />\n        </div>\n        <div className=\"Pane\">\n          <h2>Classification rules</h2>\n          <p>\n            Define classification rules (e.g. PKS) by selecting required domains (e.g. KS, AT)\n            and their evaluation logic (e.g. 0 and 1).\n          </p>\n          <p>\n            You can specify specific domain families to use for certain domain types in <b>domain filters</b> (e.g. only\n            use the PKS_KS family from KS) as well as renaming rules in <b>rename domains</b>\n             (e.g. rename all ACP after A or C domains to T). You can also select parent rules\n            in the <b>parent rule</b> selector; the resulting hierarchy will be reflected in the\n            <b> Rule hierarchy</b> pane on the right hand side.\n          </p>\n          <p>\n            The <b>evaluation expression</b> of a rule is a logical expression which <em>synthaser</em> uses\n            to determine if a sequence contains the correct combination of domains to satisfy the rule.\n            For example, given <b>KS</b> and <b>AT</b> domains in the <b>Domain types</b> pane, I could\n            create a rule <b>PKS</b> which requires both domains by first selecting <b>KS</b> and <b>AT</b> in\n            the <b>Domains</b> field of the rule, then writing <b>0 and 1</b> as the evaluation expression.\n            The numbers refer to the index of each domain in the domains list, so this expression essentially\n            means 'KS and AT'.\n          </p>\n          <RuleList\n            rules={state.rules}\n            domains={state.domains}\n            handleAdd={handleAddRule}\n            handleRemove={handleRemoveRule}\n            handleChange={handleChangeRule}\n          />\n        </div>\n        <div className=\"Pane\">\n          <h2>Rule hierarchy</h2>\n          <p>\n            The hierarchy of classification rules, generated by the <b>parent rule</b> property\n            of each rule you create.\n            This determines the order in which rules will be evaluated inside\n            synthaser. For example, if we have three rules PKS, NRPS and HR-PKS, and we set\n            the parent rule of HR-PKS to PKS, synthaser will only evaluate HR-PKS if\n            PKS was satisfied.\n          </p>\n          <RuleTree\n            rules={state.hierarchy || []}\n            onChange={treeData => setState({ ...state, hierarchy: treeData })}\n          />\n        </div>\n      </div>\n    </form>\n  )\n}\n","import { Form } from './components/Form'\nimport 'normalize.css'\nimport './App.css';\nimport 'react-sortable-tree/style.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}