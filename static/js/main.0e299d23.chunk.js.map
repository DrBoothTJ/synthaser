{"version":3,"sources":["components/domains/CDD.jsx","components/domains/Item.jsx","components/domains/List.jsx","components/rules/filter/Item.jsx","components/rules/filter/List.jsx","components/rules/rename/Item.jsx","components/rules/rename/List.jsx","components/rules/Item.jsx","components/rules/List.jsx","components/Tree.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["CDD","Object","values","dataJSON","promiseOptions","inputValue","length","Promise","resolve","setTimeout","filter","d","accession","toLowerCase","includes","name","map","r","label","value","filterDomains","DomainItem","props","domains","type","onClick","handleRemove","className","htmlFor","id","placeholder","data","onChange","handleChange","required","isMulti","defaultValue","loadOptions","target","DomainList","handleAdd","domain","index","uuid","FilterItem","find","typeOptions","rule","console","log","domainOptions","options","event","o","FilterList","filters","RenameItem","from","e","after","a","to","RenameList","renames","rename","RuleItem","handleUpdateRule","ruleOptions","rules","evaluator","parent","uuidv4","idx","_","_idx","events","forEach","RuleList","RuleTree","children","nest","Form","useState","state","setState","updateList","newData","obj","key","handleObjectChange","handleChangeDomain","handleChangeRule","blob","filename","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","text","Blob","makeBlob","JSON","stringify","file","files","reader","FileReader","readAsText","onload","parse","result","onerror","error","dIndex","rIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0e299d23.chunk.js","sourcesContent":["import dataJSON from './cdd.json'\n\nexport const CDD = Object.values(dataJSON)\n\nexport const filterDomains = inputValue => {\n  return CDD.filter(\n    d => d.accession.toLowerCase().includes(inputValue.toLowerCase())\n    || d.name.toLowerCase().includes(inputValue.toLowerCase())\n  ).map(r => {\n    r.label = `${r.name} [${r.accession}]`\n    r.value = r.name\n    return r\n  })\n}\n\nexport const promiseOptions = inputValue => {\n  if (inputValue.length < 3) return\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(filterDomains(inputValue))\n    }, 1000)\n  })\n}\n","import { promiseOptions } from './CDD'\nimport AsyncSelect from 'react-select/async'\n\nexport const DomainItem = props => {\n\n  // Mock up event since Select components do not\n  // use event.target.value\n  const onChange = domains => props.handleChange({\n    target: {\n      name: \"domains\",\n      value: domains || []\n    }\n  })\n\n  const defaultValues = domains => {\n    if (!(domains && domains.length > 0))\n      return null\n    return domains.map(d => ({\n      label: `${d.name} [${d.accession}]`,\n      value: d.accession\n    }))\n  }\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={props.handleRemove}\n      >\n        Delete\n      </button>\n      <div className=\"rule-field\">\n        <label htmlFor=\"domain-type\">Type:</label>\n        <input\n          id=\"domain-type\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Domain type...\"\n          value={props.data.name}\n          onChange={props.handleChange}\n          required\n        />\n      </div>\n      <div className=\"rule-field\">\n        <label htmlFor=\"domain-families\">Families:</label>\n        <AsyncSelect\n          id=\"domain-families\"\n          className=\"select\"\n          isMulti\n          defaultValue={defaultValues(props.data.domains)}\n          loadOptions={promiseOptions}\n          onChange={onChange}\n        />\n      </div>\n    </li>\n  )\n}\n","import { DomainItem } from './Item'\n\nexport const DomainList = props => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={props.handleAdd}>Add</button>\n    </div>\n    <ul>\n      {props.domains.map((domain, index) => {\n        return (\n          <DomainItem\n            key={domain.uuid}\n            data={domain}\n            handleRemove={props.handleRemove(index)}\n            handleChange={props.handleChange(index)}\n          />\n        )\n      })}\n    </ul>\n  </div>\n)\n","import Select from 'react-select'\n\n/**\n * A domain family filter item in a FilterList component.\n *\n * Props:\n *  @prop data {Object} - object containing data for a rule filter\n *  @prop rule {Object} - the parent rule object\n *  @prop domains {Array} - array of all domains\n *  @prop handleChange {Function} - fn for updating filter in rule\n *  @prop handleRemove {Function} - fn for removing filter from rule\n */\nexport const FilterItem = props => {\n  // Get the domain object corresponding to the selected type, if exists\n  const domain = props.domains.find(d => d.name === props.data.type)\n\n  // Generate type options based on domains in the rule\n  const typeOptions = props.rule.domains.map(d => ({ label: d, value: d }))\n\n  // Generate domain family options based on families in the selected type\n  console.log(\"dom\", domain)\n  const domainOptions = domain\n    ? domain.domains.map(d => ({ label: d.name, value: d.accession }))\n    : []\n\n  const handleChangeName = event => {\n    props.handleChange([\n      { target: { name: \"domains\", value: [] } },\n      { target: { name: \"type\", value: event.value } },\n    ])\n  }\n  const handleChangeDomains = event => {\n    props.handleChange([\n      { target: { name: \"domains\", value: event ? event.map(d => d.value) : [] } }\n    ])\n  }\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={props.handleRemove}\n      >\n        Delete\n      </button>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterName\">Domain name:</label>\n        <Select\n          className=\"select\"\n          options={typeOptions}\n          onChange={handleChangeName}\n          value={domain ? {label: domain.name, value: domain.name} : null}\n        />\n      </div>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterDomains\">Domain types:</label>\n        <Select\n          className=\"select\"\n          options={domainOptions}\n          onChange={handleChangeDomains}\n          value={props.data.domains.map(d => domainOptions.find(o => o.value === d))}\n          isMulti\n        />\n      </div>\n    </li>\n  )\n}\n","import { FilterItem } from './Item'\n\nexport const FilterList = props => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={props.handleAdd}>Add</button>\n    </div>\n    <ul>\n      {props.filters.map((filter, index) => (\n        <FilterItem\n          key={filter.uuid}\n          data={filter}\n          rule={props.rule}\n          domains={props.domains}\n          handleChange={props.handleChange(index)}\n          handleRemove={props.handleRemove(index)}\n        />\n      ))}\n    </ul>\n  </div>\n)\n","import Select from 'react-select'\n\nexport const RenameItem = props => {\n\n  // Get from domain options based on domains in the rule\n  const options = props.rule.domains.map(d => ({ label: d, value: d }))\n\n  const handleChangeFrom = event => {\n    props.handleChange({\n      target: { name: \"from\", value: event.value }\n    })\n  }\n  const handleChangeAfter = event => {\n    props.handleChange({\n      target: { name: \"after\", value: event ? event.map(e => e.value) : [] }\n    })\n  }\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={props.handleRemove}\n      >\n        Delete\n      </button>\n\n      {/* Change this domain name */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"renameName\">From:</label>\n        <Select\n          id=\"renameName\"\n          className=\"select\"\n          onChange={handleChangeFrom}\n          options={options}\n          value={options.find(o => o.label === props.data.from)}\n        />\n      </div>\n\n      {/* Change domain name when occuring after these domains */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"renameAfter\">After domains:</label>\n        <Select\n          id=\"renameAfter\"\n          className=\"select\"\n          options={options}\n          onChange={handleChangeAfter}\n          value={props.data.after.map(a => options.find(o => o.label === a))}\n          isMulti\n        />\n      </div>\n\n      {/* Change domain name to this value */}\n      <div className=\"rule-field\">\n        <label htmlFor=\"filterTo\">To:</label>\n        <input\n          id=\"filterTo\"\n          type=\"text\"\n          name=\"to\"\n          value={props.data.to}\n          onChange={props.handleChange}\n        />\n      </div>\n    </li>\n  )\n}\n","import { RenameItem } from './Item'\n\nexport const RenameList = props => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={props.handleAdd}>Add</button>\n    </div>\n    <ul>\n      {props.renames.map((rename, index) => (\n        <RenameItem\n          key={rename.uuid}\n          data={rename}\n          rule={props.rule}\n          domains={props.domains}\n          handleChange={props.handleChange(index)}\n          handleRemove={props.handleRemove(index)}\n        />\n      ))}\n    </ul>\n  </div>\n)\n","import Select from 'react-select'\n\nimport { FilterList } from './filter/List'\nimport { RenameList } from './rename/List'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const RuleItem = props => {\n\n  const handleUpdateRule = (label, value) => {\n    props.handleChange({\n      target: { name: label, value : value }\n    })\n  }\n\n  const handleAddFilter = () => {\n    handleUpdateRule(\n      \"filters\",\n      [{ uuid: uuidv4(), type: \"\", domains: [] }, ...props.data.filters]\n    )\n  }\n  const handleChangeFilter = idx => events => {\n    handleUpdateRule(\n      \"filters\",\n      props.data.filters.map((filter, _idx) => {\n        if (_idx !== idx) return filter\n        const data = { ...filter }\n        events.forEach(event => {\n          data[event.target.name] = event.target.value\n        })\n        return data\n      })\n    )\n  }\n  const handleRemoveFilter = idx => () => {\n    handleUpdateRule(\n      \"filters\",\n      props.data.filters.filter((_, _idx) => _idx !== idx)\n    )\n  }\n\n  const handleAddRename = () => {\n    handleUpdateRule(\n      \"renames\",\n      [{ uuid: uuidv4(), \"from\": \"\", \"after\": [], \"to\": \"\" }, ...props.data.renames]\n    )\n  }\n  const handleChangeRename = idx => event => {\n    handleUpdateRule(\n      \"renames\",\n      props.data.renames.map((rename, _idx) => {\n        if (_idx !== idx) return rename\n        return { ...rename, [event.target.name]: event.target.value}\n      })\n    )\n  }\n  const handleRemoveRename = idx => () => {\n    handleUpdateRule(\n      \"renames\",\n      props.data.renames.filter((_, _idx) => _idx !== idx)\n    )\n  }\n\n  const domainOptions = props.domains.map(domain => ({\n    label: domain.name,\n    value: domain.name\n  }))\n  const handleChangeDomains = event => props.handleChange({\n    target: {\n      name: \"domains\",\n      value: event ? event.map(e => e.value) : []\n    }\n  })\n\n  const ruleOptions = props.rules\n    .filter(rule => rule.uuid !== props.data.uuid)\n    .map(rule => ({ label: rule.name, value: rule.uuid }))\n  const handleChangeParent = event => props.handleChange({\n    target: { name: \"parent\", value: event.value }\n  })\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        onClick={props.handleRemove}\n      >\n        Delete\n      </button>\n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleName\">Name:</label>\n        <input\n          id=\"ruleName\"\n          type=\"text\"\n          name=\"name\"\n          value={props.data.name}\n          onChange={props.handleChange}\n        />\n      </div>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleDomains\">Domains:</label>\n        <Select\n          name=\"domains\"\n          options={domainOptions}\n          onChange={handleChangeDomains}\n          className=\"select\"\n          value={props.data.domains.map(d => domainOptions.find(o => o.label === d))}\n          isMulti\n        />\n      </div>\n      \n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleEvaluator\">Evaluation expression:</label>\n        <input\n          id=\"ruleEvaluator\"\n          type=\"text\"\n          name=\"evaluator\"\n          value={props.data.evaluator}\n          onChange={props.handleChange}\n        />\n      </div>\n\n      <div className=\"rule-field\">\n        <label htmlFor=\"ruleParent\">Parent rule:</label>\n        <Select\n          id=\"ruleParent\"\n          name=\"parent\"\n          className=\"select\"\n          options={ruleOptions}\n          onChange={handleChangeParent}\n          value={ruleOptions.find(o => o.label === props.data.parent)}\n        />\n      </div>\n\n      <label htmlFor=\"ruleFilters\">Domain filters:</label>\n      <FilterList\n        id=\"ruleFilters\"\n        rule={props.data}\n        filters={props.data.filters}\n        domains={props.domains}\n        handleAdd={handleAddFilter}\n        handleRemove={handleRemoveFilter}\n        handleChange={handleChangeFilter}\n      />\n\n      <label htmlFor=\"ruleRename\">Rename domains:</label>\n      <RenameList\n        id=\"ruleRename\"\n        rule={props.data}\n        renames={props.data.renames}\n        domains={props.domains}\n        handleAdd={handleAddRename}\n        handleRemove={handleRemoveRename}\n        handleChange={handleChangeRename}\n      />\n    </li>\n  )\n}\n","import { RuleItem } from './Item'\n\nexport const RuleList = props => (\n  <div>\n    <div>\n      <button type=\"button\" onClick={props.handleAdd}>Add</button>\n    </div>\n    <ul>\n      {props.rules.map((rule, index) => (\n        <RuleItem\n          key={rule.uuid}\n          data={rule}\n          domains={props.domains}\n          rules={props.rules}\n          handleRemove={props.handleRemove(index)}\n          handleChange={props.handleChange(index)}\n        />\n      ))}\n    </ul>\n  </div>\n)\n","export const RuleTree = props => {\n  return (\n    <ul>\n      {props.rules.map(rule => {\n        if (!rule.children)\n          return (<li key={rule.uuid}>{rule.name}</li>)\n        return (<li key={rule.uuid}>{rule.name}<RuleTree rules={rule.children}/></li>)\n      })}\n    </ul>\n  )\n}\n","import { useState } from 'react'\nimport { DomainList } from './domains/List'\nimport { RuleList } from './rules/List'\nimport { RuleTree } from './Tree'\nimport { v4 as uuidv4 } from 'uuid'\n\n\n/**\n * Generates hierarchicy of rules based on parent/child relationships.\n *\n * Looks for children of a rule (uuid parameter), then returns copies\n * of those children, recursing for their children, if any.\n * \n * @prop {Array} rules - rule objects\n * @prop {String} uuid - UUID of a parent rule\n */\nconst nest = (rules, uuid = null) => rules\n  .filter(rule => rule.parent === uuid)\n  .map(rule => ({\n    ...rule,\n    children: nest(rules.filter(r => r !== rule), rule.uuid)\n  }))\n\n/**\n * Creates new Blob object containing serialised ruleset.\n */\nfunction makeBlob(text) {\n  return new Blob([text], {type: \"text/json\"})\n}\n\n/**\n * Prompts user download of a Blob object given some filename.\n */\nfunction download(blob, filename) {\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n/**\n * The main synthaser rule generator form.\n */\nexport const Form = () => {\n  const [state, setState] = useState({\n    domains: [],\n    rules: [],\n  })\n\n  /**\n   * Prepends a new domain object to the domain array in state.\n   *\n   * Each new domain has the following properties:\n   * @prop {String} uuid - Unique identifier string generated by uuidv4\n   * @prop {String} name - Name of domain type\n   * @prop {Array} domains - Domain families of this domain type\n   */\n  const handleAddDomain = () => {\n    setState({\n      ...state,\n      domains: [{ uuid: uuidv4(), name: \"\", domains: [] }, ...state.domains]\n    })\n  }\n\n  /**\n   * Creates a function which can remove a domain object from state.\n   */\n  const handleRemoveDomain = index => () => {\n    setState({\n      ...state,\n      domains: state.domains.filter((_, dIndex) => index !== dIndex)\n    })\n  }\n\n  /**\n   * Creates a copy of an object with new key/value pair from an event.\n   */\n  const handleObjectChange = (obj, event) => {\n    const key = event.target.name\n    return { ...obj, [key]: event.target.value}\n  }\n\n  /**\n   * Creates a function which can update domain/rule arrays in state.\n   * First layer takes a name ('domains', 'rules') and creates function\n   * that takes an array index. This function then creates a function\n   * which takes an event, updating the element at the index in the state.\n   */\n  const updateList = name => index => event => {\n    const newData = state[name].map((obj, idx) => {\n      if (idx !== index) return obj\n      return handleObjectChange(obj, event)\n    })\n    setState({ ...state, [name]: newData })\n  }\n  const handleChangeDomain = updateList(\"domains\")\n  const handleChangeRule = updateList(\"rules\")\n\n  /**\n   * Prepends a new rule to the rules array in state.\n   *\n   * Each new rule has the following properties:\n   * @prop {String} uuid - Unique identifier string generated by uuidv4\n   * @prop {String} name - Name of rule\n   * @prop {Array} domains - Domain types used by this rule\n   * @prop {Array} filters - Domain type filter rules\n   * @prop {Array} renames - Domain type rename rules\n   * @prop {String} evaluator - Evaluation logical expression\n   * @prop {String} parent - UUID of parent rule, if any\n   */\n  const handleAddRule = () => {\n    setState({\n      ...state,\n      rules: [\n        {\n          uuid: uuidv4(),\n          name: \"\",\n          domains: [],\n          filters: [],\n          renames: [],\n          evaluator: \"\",\n          parent: null,\n        },\n        ...state.rules\n      ],\n    })\n  }\n\n  /**\n   * Generates removal function for a rule at a given index.\n   * This function is passed to a <RuleList> argument, which will\n   * call it for each <RuleItem> index, so rules can be deleted\n   * from within those components by button click.\n   */\n  const handleRemoveRule = index => () => {\n    let uuid = state.rules.filter((_, _idx) => _idx === index)[0].uuid\n    setState({\n      ...state,\n      rules: state.rules.filter((rule, rIndex) => {\n        if (rule.parent === uuid)\n          rule.parent = \"\"\n        return index !== rIndex\n      }),\n    })\n  }\n\n  /**\n   * Serialises ruleset to JSON and prompts user download.\n   */\n  const handleSaveRule = () => {\n    let text = JSON.stringify(state, null, 2)\n    let blob = makeBlob(text)\n    download(blob, 'synthaser_rules.json')\n  }\n\n  /**\n   * Loads saved JSON ruleset from file <input> element.\n   */\n  const handleLoadRule = event => {\n    let files = event.target.files\n    let file = files[0]\n    if (!file) return\n    let reader = new FileReader()\n    reader.readAsText(file)\n    reader.onload = function() {\n      let data = JSON.parse(reader.result)\n      setState(data)\n    }\n    reader.onerror = function() {\n      console.log(reader.error)\n    }\n  }\n\n  return (\n    <form>\n      <div>\n        <div className=\"navbar\">\n          <b>synthaser rule generator</b>\n          <div className=\"nav-buttons\">\n            <button\n              type=\"button\"\n              className=\"nav-button btn-save\"\n              onClick={handleSaveRule}\n            >\n              Save rules\n            </button>\n            <input\n              type=\"file\"\n              name=\"file\"\n              id=\"rule-upload\"\n              onChange={handleLoadRule}\n            />\n            <label\n              className=\"nav-button btn-load\"\n              htmlFor=\"rule-upload\"\n            >Load rules</label>\n            <button\n              type=\"button\"\n              className=\"nav-button btn-clear\"\n              onClick={() => setState({ domains: [], rules: [] })}\n            >\n              Clear all fields\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"Container\">\n        <div className=\"Pane\">\n          <h2>Domain types</h2>\n          <p>\n            Define domain classes (e.g. KS) and select the relevant CDD domain families.\n            Search suggestions are shown when at least 3 characters are typed in the box.\n          </p>\n          <DomainList\n            domains={state.domains}\n            handleAdd={handleAddDomain}\n            handleRemove={handleRemoveDomain}\n            handleChange={handleChangeDomain}\n          />\n        </div>\n        <div className=\"Pane\">\n          <h2>Classification rules</h2>\n          <p>\n            Define classification rules (e.g. PKS) by selecting required domains (e.g. KS, AT)\n            and their evaluation logic (e.g. 0 and 1).\n          </p>\n          <p>\n            You can specify specific domain families to use for certain domain types in <b>domain filters</b> (e.g. only\n            use the PKS_KS family from KS) as well as renaming rules in <b>rename domains</b>\n             (e.g. rename all ACP after A or C domains to T). You can also select parent rules\n            in the <b>parent rule</b> selector; the resulting hierarchy will be reflected in the\n            <b> Rule hierarchy</b> pane on the right hand side.\n          </p>\n          <p>\n            The <b>evaluation expression</b> of a rule is a logical expression which <em>synthaser</em> uses\n            to determine if a sequence contains the correct combination of domains to satisfy the rule.\n            For example, given <b>KS</b> and <b>AT</b> domains in the <b>Domain types</b> pane, I could\n            create a rule <b>PKS</b> which requires both domains by first selecting <b>KS</b> and <b>AT</b> in\n            the <b>Domains</b> field of the rule, then writing <b>0 and 1</b> as the evaluation expression.\n            The numbers refer to the index of each domain in the domains list, so this expression essentially\n            means 'KS and AT'.\n          </p>\n          <RuleList\n            rules={state.rules}\n            domains={state.domains}\n            handleAdd={handleAddRule}\n            handleRemove={handleRemoveRule}\n            handleChange={handleChangeRule}\n          />\n        </div>\n        <div className=\"Pane\">\n          <h2>Rule hierarchy</h2>\n          <p>\n            The hierarchy of classification rules, generated by the <b>parent rule</b> property\n            of each rule you create.\n            This determines the order in which rules will be evaluated inside\n            synthaser. For example, if we have three rules PKS, NRPS and HR-PKS, and we set\n            the parent rule of HR-PKS to PKS, synthaser will only evaluate HR-PKS if\n            PKS was satisfied.\n          </p>\n          <RuleTree rules={nest(state.rules)} />\n        </div>\n      </div>\n    </form>\n  )\n}\n","import { Form } from './components/Form'\nimport 'normalize.css'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}